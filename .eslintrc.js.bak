// Source: https://eslint.org/docs/user-guide/configuring

module.exports = {
  // This configuration file is in project root folder!
  root: true,

  // Use Babel parser to make Babel compatible with ESLint!
  parser: 'babel-eslint',

  parserOptions: {
    // Specify version of ECMAScript syntax (default: 5)
    ecmaVersion: 6,

    // Specify if code is in ECMAScript 'module' or 'script' files (default: 'script')
    sourceType: 'module',
  },

  // Airbnb: https://github.com/airbnb/javascript
  extends: ['airbnb-base', 'prettier'],

  // Replace ESLint with Prettier for doing code formatting. ESLint should only improve the code,
  // not format it.
  plugins: ['prettier'],

  // Define rules that differ from Airbnb defaults.
  rules: {
    'prettier/prettier': ['error'],

    // Enforce require() on the top-level module scope (default: error)
    'global-require': 'off',

    // Enforce consistent line breaks inside function parentheses (default: error)
    'function-paren-newline': 'off',

    // Disallow use of multiple spaces (default: error)
    // Multiple spaces in a row that are not used for indentation are typically mistakes.
    'no-multi-spaces': 'warn',

    // Enforce line breaks between braces (default: error)
    'object-curly-newline': 'off',

    // Prefer destructuring from arrays and objects (default: error)
    // If you want to be able to access array indices or object properties directly, you can disable
    // the rule entirely.
    'prefer-destructuring': 'off',

    // Disallow reassignment of function parameters (default: error)
    // This rule aims to prevent unintended behavior caused by modification or reassignment of
    // function parameters.
    'no-param-reassign': ['error', { props: false }],

    // Disallow use of unary operators, ++ and -- (default: error)
    // Because the unary ++ and -- operators are subject to automatic semicolon insertion,
    // differences in whitespace can change semantics of source code. Recommendation: only disable
    // this if semicolons are used!
    'no-plusplus': 'off',

    // Suggest using template literals instead of string concatenation (default: error)
    'prefer-template': 'off',

    // Disallow use of variables before they are defined (default: error)
    // In JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a
    // scope, so itâ€™s possible to use identifiers before their formal declarations in code. This can
    // be confusing and some believe it is best to always declare variables
    // and functions before using them.
    'no-use-before-define': ['error', { variables: false, functions: false, classes: false }],

    // Ensure imports point to files/modules that can be resolved (default: error)
    // Ensures an imported module can be resolved to a module on the local filesystem, as defined by
    // standard Node require.resolve
    // behavior.
    'import/no-unresolved': 'off',

    // Ensure consistent use of file extension within the import path (default: error)
    // Some file resolve algorithms allow you to omit the file extension within the import source
    // path. In order to provide a consistent use of file extensions across your code base, this
    // rule can enforce or disallow the use of certain file extensions.
    'import/extensions': 'off',

    'import/no-cycle': 'off',

    // Require or disallow a space immediately following the // or /* in a comment
    'spaced-comment': ['error', 'always', { exceptions: ['-', '+', '*', '!', '='] }],

    // Disallow use of debugger (default: error)
    'no-debugger': process.env.NODE_ENV === 'development' ? 'off' : 'error',

    // When there is only a single export from a module, prefer using default export over named
    // export (default: error)
    'import/prefer-default-export': 'off',

    // Do not check for unused function arguments.
    'no-unused-vars': ['error', { args: 'none' }],

    // Forbid the import of external modules that are not declared in the package.json's
    // dependencies, devDependencies, optionalDependencies or peerDependencies.
    'import/no-extraneous-dependencies': ['error', { devDependencies: true }],

    // Specify the maximum length of a line (default: 100)
    'max-len': [
      'warn',
      {
        code: 100,
        comments: 100,
        tabWidth: 2,
        ignoreUrls: true,
        ignoreComments: false,
        ignoreRegExpLiterals: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
      },
    ],
  },

  // The no-undef rule will warn on variables that are accessed but not defined
  // within the same file. Globals defined here will not be warned about by ESLint.
  globals: {
    document: true,
    window: true,
    CallGuide: true,
    sessionStorage: true,
    localStorage: true,
    navigator: true,
    cgDisableChatOffer: true,
    CallGuideChatClient: true,
    XMLHttpRequest: true,
    XDomainRequest: true,
    jasmine: true,
    jest: true,
    describe: true,
    fdescribe: true,
    xdescribe: true,
    it: true,
    fit: true,
    xit: true,
    expect: true,
    spyOn: true,
    beforeEach: true,
    afterEach: true,
    WebSocket: true,
    OT: true,
    afterAll: true,
    beforeAll: true,
    ga: true,
    CustomEvent: true,
    Event: true,
  },
};
